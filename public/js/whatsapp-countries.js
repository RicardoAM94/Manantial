// ================================
// VALIDACI√ìN SIMPLE DE WHATSAPP
// ================================

// Funci√≥n simple para validar n√∫mero de WhatsApp
function validateWhatsAppNumber(phoneNumber) {
    // Limpiar el n√∫mero
    const cleaned = phoneNumber.trim();
    
    // Debe empezar con +
    if (!cleaned.startsWith('+')) {
        return { 
            valid: false, 
            error: 'El n√∫mero debe empezar con + seguido del c√≥digo de pa√≠s',
            suggestion: 'Ejemplo: +573148014430'
        };
    }
    
    // Extraer solo n√∫meros despu√©s del +
    const numbers = cleaned.substring(1).replace(/\D/g, '');
    
    // Validar longitud (c√≥digos de pa√≠s + n√∫mero local)
    if (numbers.length < 10 || numbers.length > 15) {
        return { 
            valid: false, 
            error: 'El n√∫mero debe tener entre 10 y 15 d√≠gitos',
            suggestion: 'Verifica que incluyas el c√≥digo de pa√≠s y el n√∫mero completo'
        };
    }
    
    // Detectar algunos pa√≠ses comunes
    let country = 'Desconocido';
    if (numbers.startsWith('57')) country = 'Colombia üá®üá¥';
    else if (numbers.startsWith('54')) country = 'Argentina üá¶üá∑';
    else if (numbers.startsWith('56')) country = 'Chile üá®üá±';
    else if (numbers.startsWith('51')) country = 'Per√∫ üáµüá™';
    else if (numbers.startsWith('52')) country = 'M√©xico üá≤üáΩ';
    else if (numbers.startsWith('34')) country = 'Espa√±a üá™üá∏';
    else if (numbers.startsWith('1')) country = 'USA/Canad√° üá∫üá∏üá®üá¶';
    else if (numbers.startsWith('55')) country = 'Brasil üáßüá∑';
    
    return { 
        valid: true, 
        country: country,
        cleanNumber: numbers,
        formatted: `+${numbers}`,
        whatsappUrl: `https://wa.me/${numbers}`
    };
}

// Funci√≥n para validar en tiempo real
function validateWhatsAppInput(input) {
    const value = input.value;
    const indicator = document.getElementById('validation-indicator');
    const message = document.getElementById('validation-message');
    
    // Limpiar estados anteriores
    input.classList.remove('valid', 'invalid');
    indicator.classList.remove('valid', 'invalid');
    message.classList.remove('show', 'success', 'error');
    
    if (!value) {
        return; // No mostrar nada si est√° vac√≠o
    }
    
    const validation = validateWhatsAppNumber(value);
    
    if (validation.valid) {
        // V√°lido
        input.classList.add('valid');
        indicator.classList.add('valid');
        message.textContent = `‚úÖ N√∫mero v√°lido para ${validation.country}`;
        message.classList.add('show', 'success');
    } else {
        // Inv√°lido
        input.classList.add('invalid');
        indicator.classList.add('invalid');
        message.textContent = `‚ùå ${validation.error}. ${validation.suggestion || ''}`;
        message.classList.add('show', 'error');
    }
}

// Funci√≥n para probar el n√∫mero de WhatsApp
function testWhatsAppNumber() {
    const input = document.getElementById('whatsapp-number');
    const number = input.value.trim();
    
    if (!number) {
        alert('Por favor ingresa un n√∫mero de WhatsApp');
        return;
    }
    
    const validation = validateWhatsAppNumber(number);
    
    if (!validation.valid) {
        alert(`Error: ${validation.error}\n\n${validation.suggestion || ''}`);
        return;
    }
    
    // Abrir WhatsApp con mensaje de prueba
    const testMessage = 'Hola! Este es un mensaje de prueba para verificar que el n√∫mero de WhatsApp est√° funcionando correctamente. üîÆ';
    const url = `${validation.whatsappUrl}?text=${encodeURIComponent(testMessage)}`;
    
    if (confirm(`¬øAbrir WhatsApp para probar el n√∫mero ${validation.formatted}?\n\nPa√≠s detectado: ${validation.country}`)) {
        window.open(url, '_blank');
    }
}

// Exportar para uso global
if (typeof window !== 'undefined') {
    window.validateWhatsAppNumber = validateWhatsAppNumber;
    window.validateWhatsAppInput = validateWhatsAppInput;
    window.testWhatsAppNumber = testWhatsAppNumber;
}

// C√≥digos de pa√≠s m√°s comunes para referencia
const COMMON_COUNTRY_CODES = {
    '+1': 'Estados Unidos / Canad√° ÔøΩÔøΩüá®üá¶',
    '+52': 'M√©xico ÔøΩÔøΩ',
    '+57': 'Colombia üá®üá¥',
    '+54': 'Argentina ÔøΩüá∑',
    '+56': 'Chile ÔøΩÔøΩ',
    '+51': 'Per√∫ üáµüá™',
    '+55': 'Brasil ÔøΩüá∑',
    '+34': 'Espa√±a üá™üá∏',
    
    // Otros pa√≠ses populares
    'GB': { name: 'Reino Unido', code: '+44', flag: 'üá¨üáß' },
    'FR': { name: 'Francia', code: '+33', flag: 'üá´üá∑' },
    'DE': { name: 'Alemania', code: '+49', flag: 'üá©üá™' },
    'IT': { name: 'Italia', code: '+39', flag: 'üáÆüáπ' },
    'PT': { name: 'Portugal', code: '+351', flag: 'üáµüáπ' }
};

// Funci√≥n para detectar pa√≠s por c√≥digo
function detectCountryByCode(phoneNumber) {
    if (!phoneNumber.startsWith('+')) return null;
    
    // Buscar coincidencia exacta primero (para c√≥digos m√°s largos)
    const sortedCodes = Object.entries(COUNTRY_CODES)
        .sort(([,a], [,b]) => b.code.length - a.code.length);
    
    for (const [countryCode, data] of sortedCodes) {
        if (phoneNumber.startsWith(data.code)) {
            return {
                country: countryCode,
                ...data,
                number: phoneNumber.substring(data.code.length)
            };
        }
    }
    return null;
}

// Funci√≥n para formatear n√∫mero de WhatsApp
function formatWhatsAppNumber(countryCode, phoneNumber) {
    const country = COUNTRY_CODES[countryCode];
    if (!country) return null;
    
    // Limpiar n√∫mero (solo d√≠gitos)
    const cleanNumber = phoneNumber.replace(/\D/g, '');
    
    // Formatear con c√≥digo de pa√≠s
    return {
        full: `${country.code}${cleanNumber}`,
        display: `${country.flag} ${country.code} ${cleanNumber}`,
        country: country.name,
        code: country.code,
        flag: country.flag
    };
}

// Funci√≥n para validar n√∫mero de WhatsApp
function validateWhatsAppNumber(phoneNumber) {
    // Debe empezar con +
    if (!phoneNumber.startsWith('+')) {
        return { valid: false, error: 'El n√∫mero debe empezar con +' };
    }
    
    // Detectar pa√≠s
    const detected = detectCountryByCode(phoneNumber);
    if (!detected) {
        return { valid: false, error: 'C√≥digo de pa√≠s no v√°lido' };
    }
    
    // Validar longitud del n√∫mero local
    const localNumber = detected.number;
    if (localNumber.length < 7 || localNumber.length > 15) {
        return { valid: false, error: 'Longitud de n√∫mero no v√°lida' };
    }
    
    // Solo d√≠gitos en n√∫mero local
    if (!/^\d+$/.test(localNumber)) {
        return { valid: false, error: 'El n√∫mero solo debe contener d√≠gitos' };
    }
    
    return { 
        valid: true, 
        formatted: detected,
        country: detected.name,
        code: detected.code,
        flag: detected.flag
    };
}

// Funci√≥n para crear URL de WhatsApp
function createWhatsAppURL(phoneNumber, message = '') {
    const validation = validateWhatsAppNumber(phoneNumber);
    if (!validation.valid) return null;
    
    const cleanNumber = phoneNumber.replace(/\D/g, ''); // Solo n√∫meros, sin +
    const encodedMessage = encodeURIComponent(message);
    
    return `https://wa.me/${cleanNumber}?text=${encodedMessage}`;
}

// Exportar para uso global
if (typeof window !== 'undefined') {
    window.WhatsAppCountryCodes = {
        COUNTRY_CODES,
        detectCountryByCode,
        formatWhatsAppNumber,
        validateWhatsAppNumber,
        createWhatsAppURL
    };
}

// Exportar para Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        COUNTRY_CODES,
        detectCountryByCode,
        formatWhatsAppNumber,
        validateWhatsAppNumber,
        createWhatsAppURL
    };
}